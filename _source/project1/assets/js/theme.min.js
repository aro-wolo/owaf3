"use strict";
var Demo = function () { }(),
	ThemeCharts = function () {
		var a, e = $('[data-toggle="chart"]'),
			t = {
				base: "Cerebri Sans"
			},
			o = {
				gray: {
					300: "#E3EBF6",
					600: "#95AAC9",
					700: "#6E84A3",
					800: "#152E4D",
					900: "#283E59"
				},
				danger: {
					900: "#b30000",
					300: "rgba(157, 51, 37, 0.73)",
				},
				primary: {
					100: "#D2DDEC",
					300: "#A6C5F7",
					700: "#2C7BE5"
				},
				black: "#12263F",
				pink: "#ffc0cb",
				white: "#FFFFFF",
				danger: "#e63757",
				warning: "#f6c343",
				success: "#00d97e",
				secondary: "#6e84a3",
				color1: "#b84dc5",
				color2: "#962252",
				color3: "#45b9cc",
				color4: "#b84dc5",
				color5: "#c5a355",
				transparent: "transparent"
			},
			r = "rgb(249, 251, 253)" == getComputedStyle(document.body).backgroundColor ? "light" : "dark";

		function l(a, e) {
			for (var t in e) "object" != typeof e[t] ? a[t] = e[t] : l(a[t], e[t])
		}

		function n(a) {
			var e = a.data("add"),
				t = $(a.data("target")).data("chart");
			a.is(":checked") ? function a(e, t) {
				for (var o in t) Array.isArray(t[o]) ? t[o].forEach(function (a) {
					e[o].push(a)
				}) : a(e[o], t[o])
			}(t, e) : function a(e, t) {
				for (var o in t) Array.isArray(t[o]) ? t[o].forEach(function (a) {
					e[o].pop()
				}) : a(e[o], t[o])
			}(t, e), t.update()
		}

		function s(a) {
			var e = a.data("update"),
				t = $(a.data("target")).data("chart");
			l(t, e),
				function (a, e) {
					if (void 0 !== a.data("prefix") || void 0 !== a.data("prefix")) {
						var l = a.data("prefix") ? a.data("prefix") : "",
							n = a.data("suffix") ? a.data("suffix") : "";
						e.options.scales.yAxes[0].ticks.callback = function (a) {
							if (!(a % 10)) return l + a + n
						}, e.options.tooltips.callbacks.label = function (a, e) {
							var t = e.datasets[a.datasetIndex].label || "",
								o = a.yLabel,
								r = "";
							return 1 < e.datasets.length && (r += '<span class="popover-body-label mr-auto">' + t + "</span>"), r += '<span class="popover-body-value">' + l + o + n + "</span>"
						}
					}
				}(a, t), t.update()
		}
		return window.Chart && l(Chart, (a = {
			defaults: {
				global: {
					responsive: !0,
					maintainAspectRatio: false,
					defaultColor: "dark" == r ? o.gray[700] : o.gray[600],
					defaultFontColor: "dark" == r ? o.gray[700] : o.gray[600],
					defaultFontFamily: t.base,
					defaultFontSize: 13,
					layout: {
						padding: 0
					},
					legend: {
						display: !1,
						position: "bottom",
						labels: {
							usePointStyle: !0,
							padding: 16
						}
					},
					elements: {
						point: {
							radius: 0,
							backgroundColor: o.primary[700]
						},
						line: {
							tension: .4,
							borderWidth: 2,
							borderColor: o.primary[700],
							backgroundColor: o.transparent,
							borderCapStyle: "rounded"
						},
						rectangle: {
							backgroundColor: o.primary[700]
						},
						arc: {
							backgroundColor: o.primary[700],
							borderColor: "dark" == r ? o.gray[800] : o.white,
							borderWidth: 4
						}
					},
					tooltips: {
						enabled: !1,
						mode: "index",
						intersect: !1,
						custom: function (r) {
							var a = $("#chart-tooltip");
							if (a.length || (a = $('<div id="chart-tooltip" class="popover bs-popover-top" role="tooltip"></div>'), $("body").append(a)), 0 !== r.opacity) {
								if (r.body) {
									var e = r.title || [],
										l = r.body.map(function (a) {
											return a.lines
										}),
										n = "";
									n += '<div class="arrow"></div>', e.forEach(function (a) {
										n += '<h3 class="popover-header text-center">' + a + "</h3>"
									}), l.forEach(function (a, e) {
										var t = '<span class="popover-body-indicator" style="background-color: ' + r.labelColors[e].backgroundColor + '"></span>',
											o = 1 < l.length ? "justify-content-left" : "justify-content-center";
										n += '<div class="popover-body d-flex align-items-center ' + o + '">' + t + a + "</div>"
									}), a.html(n)
								}
								var t = $(this._chart.canvas),
									o = (t.outerWidth(), t.outerHeight(), t.offset().top),
									s = t.offset().left,
									i = a.outerWidth(),
									c = a.outerHeight(),
									d = o + r.caretY - c - 16,
									u = s + r.caretX - i / 2;
								a.css({
									top: d + "px",
									left: u + "px",
									display: "block"
								})
							} else a.css("display", "none")
						},
						callbacks: {
							label: function (a, e) {
								var t = e.datasets[a.datasetIndex].label || "",
									o = a.yLabel,
									r = "";
								return 1 < e.datasets.length && (r += '<span class="popover-body-label mr-auto">' + t + "</span>"), r += '<span class="popover-body-value">' + o + "</span>"
							}
						}
					}
				},
				doughnut: {
					cutoutPercentage: 60,
					tooltips: {
						callbacks: {
							title: function (a, e) {
								return e.labels[a[0].index]
							},
							label: function (a, e) {
								var t = "";
								return t += '<span class="popover-body-value">' + e.datasets[0].data[a.index] + "</span>"
							}
						}
					},
					legendCallback: function (a) {
						var o = a.data,
							r = "";
						return o.labels.forEach(function (a, e) {
							var t = o.datasets[0].backgroundColor[e];
							r += '<span class="chart-legend-item">', r += '<i class="chart-legend-indicator" style="background-color: ' + t + '"></i>', r += a, r += "</span>"
						}), r
					}
				}
			}
		}, Chart.scaleService.updateScaleDefaults("linear", {
			gridLines: {
				borderDash: [2],
				borderDashOffset: [2],
				color: "dark" == r ? o.gray[900] : o.gray[300],
				drawBorder: !1,
				drawTicks: !1,
				lineWidth: 0,
				zeroLineWidth: 0,
				zeroLineColor: "dark" == r ? o.gray[900] : o.gray[300],
				zeroLineBorderDash: [2],
				zeroLineBorderDashOffset: [2]
			},
			ticks: {
				beginAtZero: !0,
				padding: 10,
				callback: function (a) {
					if (!(a % 10)) return a
				}
			}
		}), Chart.scaleService.updateScaleDefaults("category", {
			gridLines: {
				drawBorder: !1,
				drawOnChartArea: !1,
				drawTicks: !1
			},
			ticks: {
				padding: 20
			},
			maxBarThickness: 20

		}), a)), e.on({
			change: function () {
				var a = $(this);
				a.is("[data-add]") && n(a)
			},
			click: function () {
				var a = $(this);
				a.is("[data-update]") && s(a)
			}
		}), {
				colors: o,
				fonts: t,
				colorScheme: r
			}
	}(),

	Navbar = function () {
		var e = $(".navbar-nav, .navbar-nav .nav"),
			t = $(".navbar-nav .collapse");
		t.on({
			"show.bs.collapse": function () {
				var a;
				(a = $(this)).closest(e).find(t).not(a).collapse("hide")
			}
		})
	}(),
	Popover = function () {
		var a = $('[data-toggle="popover"]');
		a.length && a.popover()
	}(),
	Quill = function () {
		var a = $('[data-toggle="quill"]');
		a.length && a.each(function () {
			var a, e;
			a = $(this), e = a.data("quill-placeholder"), new Quill(a.get(0), {
				modules: {
					toolbar: [
						["bold", "italic"],
						["link", "blockquote", "code", "image"],
						[{
							list: "ordered"
						}, {
							list: "bullet"
						}]
					]
				},
				placeholder: e,
				theme: "snow"
			})
		})
	}(),

	Tooltip = function () {
		var a = $('[data-toggle="tooltip"]');
		a.length && a.tooltip()
	}();